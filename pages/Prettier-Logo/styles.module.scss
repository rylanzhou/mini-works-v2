$red: #ea5e5e;
$yellow: #f7ba3e;
$blue: #56b3b4;
$purple: #bf85bf;
$background: #1a2b34;
$gray: #334651;
$unit: 10px;
$infinite: 2000px;
$container-width: 670px;

:export {
  red: $red;
  yellow: $yellow;
  blue: $blue;
  purple: $purple;
  background: $background;
  gray: $gray;
}

@mixin origin($num) {
  --origin: calc(#{$num} * #{$unit});
}

@mixin offset($num) {
  --offset: calc(#{$num} * #{$unit});
}

.container {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: $unit;
  width: $container-width;

  &:hover {
    cursor: pointer;
  }

  .row-container {
    position: relative;
    width: $container-width;
    border-radius: $infinite;
    overflow: hidden;

    .row {
      display: flex;
      gap: $unit;
      height: $unit;
      translate: var(--offset);
      border-radius: $infinite;

      .cell {
        height: 100%;
        width: calc(var(--size) * #{$unit});
        border-radius: $infinite;
        background-color: $gray;

        &.red {
          background-color: $red;
        }
        &.yellow {
          background-color: $yellow;
        }
        &.blue {
          background-color: $blue;
        }
        &.purple {
          background-color: $purple;
        }
      }

      &:not(.duplicate) {
        animation: shift 1s calc(var(--delay) * 0.1s + 0.5s) both;
      }

      &.duplicate {
        position: absolute;
        top: 0;
        translate: $container-width;
      }
    }

    &:nth-child(2n + 1) .row.duplicate {
      translate: -#{$container-width};
    }

    &.slide {
      &:nth-child(2n) {
        .row:not(.duplicate) {
          animation: slide-out-2 1s calc(var(--delay) * 0.1s + 0.5s) both;
        }
        .row.duplicate {
          animation: slide-in-2 1s calc(var(--delay) * 0.1s + 0.5s) forwards;
        }
      }

      &:nth-child(2n + 1) {
        .row:not(.duplicate) {
          animation: slide-out-1 1s calc(var(--delay) * 0.1s + 0.5s) both;
        }
        .row.duplicate {
          animation: slide-in-1 1s calc(var(--delay) * 0.1s + 0.5s) forwards;
        }
      }
    }

    &.no-load:not(.slide) .row {
      animation: none;
      translate: var(--origin);
    }

    &:nth-child(1) {
      --delay: 1;
      @include origin(10);
      @include offset(0);
    }
    &:nth-child(2) {
      --delay: 2;
      @include origin(3);
      @include offset(13);
    }
    &:nth-child(3) {
      --delay: 3;
      @include origin(6);
      @include offset(-4);
    }
    &:nth-child(4) {
      --delay: 4;
      @include origin(2);
      @include offset(12);
    }
    &:nth-child(5) {
      --delay: 5;
      @include origin(0);
      @include offset(-10);
    }
    &:nth-child(6) {
      --delay: 6;
      @include origin(-1);
      @include offset(9);
    }
    &:nth-child(7) {
      --delay: 7;
      @include origin(1);
      @include offset(-9);
    }
    &:nth-child(7) {
      --delay: 7;
      @include origin(1);
      @include offset(11);
    }
    &:nth-child(8) {
      --delay: 8;
      @include origin(2);
      @include offset(-8);
    }
    &:nth-child(9) {
      --delay: 9;
      @include origin(8);
      @include offset(18);
    }
    &:nth-child(10) {
      --delay: 10;
      @include origin(6);
      @include offset(-4);
    }
    &:nth-child(11) {
      --delay: 11;
      @include origin(10);
      @include offset(20);
    }
    &:nth-child(12) {
      --delay: 12;
      @include origin(5);
      @include offset(-5);
    }
    &:nth-child(13) {
      --delay: 13;
      @include origin(11);
      @include offset(21);
    }
  }
}

@keyframes shift {
  100% {
    translate: var(--origin);
  }
}

@keyframes slide-out-1 {
  0% {
    translate: var(--origin);
  }
  100% {
    translate: $container-width;
  }
}

@keyframes slide-in-1 {
  100% {
    translate: var(--origin);
  }
}

@keyframes slide-out-2 {
  0% {
    translate: var(--origin);
  }
  100% {
    translate: -#{$container-width};
  }
}

@keyframes slide-in-2 {
  100% {
    translate: var(--origin);
  }
}
